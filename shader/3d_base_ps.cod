//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer SCENE_CONSTANT_BUFFER
// {
//
//   int blur_lod;                      // Offset:    0 Size:     4 [unused]
//   int3 cbscene_ipad;                 // Offset:    4 Size:    12 [unused]
//   row_major float4x4 view;           // Offset:   16 Size:    64 [unused]
//   row_major float4x4 projection;     // Offset:   80 Size:    64 [unused]
//   float3 camera_position;            // Offset:  144 Size:    12
//   float blur_strength;               // Offset:  156 Size:     4 [unused]
//   float blur_size;                   // Offset:  160 Size:     4 [unused]
//   float post_effect_blend;           // Offset:  164 Size:     4 [unused]
//   float2 cbscene_fpad;               // Offset:  168 Size:     8 [unused]
//
// }
//
// cbuffer LIGHT_CONSTANT_BUFFER
// {
//
//   float4 ambient_color;              // Offset:    0 Size:    16 [unused]
//      = 0x3e4ccccd 0x3e4ccccd 0x3e4ccccd 0x3e4ccccd 
//   float4 directional_light_color;    // Offset:   16 Size:    16 [unused]
//      = 0x3f800000 0x3f800000 0x3f800000 0x3f800000 
//   float3 directional_light_direction;// Offset:   32 Size:    12
//      = 0x00000000 0x00000000 0x3f800000 
//   float radiance;                    // Offset:   44 Size:     4 [unused]
//      = 0x3f800000 
//   float3 directional_light_focus;    // Offset:   48 Size:    12 [unused]
//      = 0x00000000 0x00000000 0x00000000 
//   float cblight_fpad;                // Offset:   60 Size:     4 [unused]
//
// }
//
// cbuffer PRIMITIVE_CONSTANT_BUFFER
// {
//
//   row_major float4x4 world;          // Offset:    0 Size:    64 [unused]
//   int has_tangent;                   // Offset:   64 Size:     4
//   int material;                      // Offset:   68 Size:     4
//   int skin;                          // Offset:   72 Size:     4 [unused]
//   int cbprimitive_ipad;              // Offset:   76 Size:     4 [unused]
//
// }
//
// cbuffer OBJECT_COLOR_CONSTANT_BUFFER
// {
//
//   float3 object_color;               // Offset:    0 Size:    12
//   float blink_factor;                // Offset:   12 Size:     4
//   float object_disolve;              // Offset:   16 Size:     4
//   float3 cbobject_color_fpad;        // Offset:   20 Size:    12 [unused]
//
// }
//
// Resource bind info for materials
// {
//
//   struct SbMaterial
//   {
//       
//       bool double_sided;             // Offset:    0
//       int alpha_mode;                // Offset:    4
//       float alpha_cutoff;            // Offset:    8
//       float3 emissive_factor;        // Offset:   12
//       
//       struct PbrMetallicRoughness
//       {
//           
//           float4 basecolor_factor;   // Offset:   24
//           
//           struct TextureInfo
//           {
//               
//               int index;             // Offset:   40
//               int texcoord;          // Offset:   44
//               
//               struct KHRTextureTransform
//               {
//                   
//                   int texcoord;      // Offset:   48
//                   float rotation;    // Offset:   52
//                   float2 offset;     // Offset:   56
//                   float2 scale;      // Offset:   64
//
//               } khr_texture_transform;// Offset:   48
//
//           } basecolor_texture;       // Offset:   40
//           float metallic_factor;     // Offset:   72
//           float roughness_factor;    // Offset:   76
//           
//           struct TextureInfo
//           {
//               
//               int index;             // Offset:   80
//               int texcoord;          // Offset:   84
//               
//               struct KHRTextureTransform
//               {
//                   
//                   int texcoord;      // Offset:   88
//                   float rotation;    // Offset:   92
//                   float2 offset;     // Offset:   96
//                   float2 scale;      // Offset:  104
//
//               } khr_texture_transform;// Offset:   88
//
//           } metallic_roughness_texture;// Offset:   80
//
//       } pbr_metallic_roughness;      // Offset:   24
//       
//       struct NormalTextureInfo
//       {
//           
//           int index;                 // Offset:  112
//           int texcoord;              // Offset:  116
//           float scale;               // Offset:  120
//           
//           struct KHRTextureTransform
//           {
//               
//               int texcoord;          // Offset:  124
//               float rotation;        // Offset:  128
//               float2 offset;         // Offset:  132
//               float2 scale;          // Offset:  140
//
//           } khr_texture_transform;   // Offset:  124
//
//       } normal_texture;              // Offset:  112
//       
//       struct OcculusionTextureInfo
//       {
//           
//           int index;                 // Offset:  148
//           int texcoord;              // Offset:  152
//           float strength;            // Offset:  156
//           
//           struct KHRTextureTransform
//           {
//               
//               int texcoord;          // Offset:  160
//               float rotation;        // Offset:  164
//               float2 offset;         // Offset:  168
//               float2 scale;          // Offset:  176
//
//           } khr_texture_transform;   // Offset:  160
//
//       } occulusion_texture;          // Offset:  148
//       
//       struct TextureInfo
//       {
//           
//           int index;                 // Offset:  184
//           int texcoord;              // Offset:  188
//           
//           struct KHRTextureTransform
//           {
//               
//               int texcoord;          // Offset:  192
//               float rotation;        // Offset:  196
//               float2 offset;         // Offset:  200
//               float2 scale;          // Offset:  208
//
//           } khr_texture_transform;   // Offset:  192
//
//       } emissive_texture;            // Offset:  184
//       
//       struct KHRMaterialsClearcoat
//       {
//           
//           float clearcoat_factor;    // Offset:  216
//           
//           struct TextureInfo
//           {
//               
//               int index;             // Offset:  220
//               int texcoord;          // Offset:  224
//               
//               struct KHRTextureTransform
//               {
//                   
//                   int texcoord;      // Offset:  228
//                   float rotation;    // Offset:  232
//                   float2 offset;     // Offset:  236
//                   float2 scale;      // Offset:  244
//
//               } khr_texture_transform;// Offset:  228
//
//           } clearcoat_texture;       // Offset:  220
//           float clearcoat_roughness_factor;// Offset:  252
//           
//           struct TextureInfo
//           {
//               
//               int index;             // Offset:  256
//               int texcoord;          // Offset:  260
//               
//               struct KHRTextureTransform
//               {
//                   
//                   int texcoord;      // Offset:  264
//                   float rotation;    // Offset:  268
//                   float2 offset;     // Offset:  272
//                   float2 scale;      // Offset:  280
//
//               } khr_texture_transform;// Offset:  264
//
//           } clearcoat_roughness_texture;// Offset:  256
//           
//           struct NormalTextureInfo
//           {
//               
//               int index;             // Offset:  288
//               int texcoord;          // Offset:  292
//               float scale;           // Offset:  296
//               
//               struct KHRTextureTransform
//               {
//                   
//                   int texcoord;      // Offset:  300
//                   float rotation;    // Offset:  304
//                   float2 offset;     // Offset:  308
//                   float2 scale;      // Offset:  316
//
//               } khr_texture_transform;// Offset:  300
//
//           } clearcoat_normal_texture;// Offset:  288
//
//       } clearcoat;                   // Offset:  216
//       
//       struct KHRMaterialsTransmission
//       {
//           
//           float transmission_factor; // Offset:  324
//           
//           struct TextureInfo
//           {
//               
//               int index;             // Offset:  328
//               int texcoord;          // Offset:  332
//               
//               struct KHRTextureTransform
//               {
//                   
//                   int texcoord;      // Offset:  336
//                   float rotation;    // Offset:  340
//                   float2 offset;     // Offset:  344
//                   float2 scale;      // Offset:  352
//
//               } khr_texture_transform;// Offset:  336
//
//           } transmission_texture;    // Offset:  328
//
//       } transmission;                // Offset:  324
//       
//       struct KHRMaterialsEmissiveStrength
//       {
//           
//           float emissive_strength;   // Offset:  360
//
//       } emissive_strength;           // Offset:  360
//       
//       struct KHRMaterialsSpecular
//       {
//           
//           float specular_factor;     // Offset:  364
//           
//           struct TextureInfo
//           {
//               
//               int index;             // Offset:  368
//               int texcoord;          // Offset:  372
//               
//               struct KHRTextureTransform
//               {
//                   
//                   int texcoord;      // Offset:  376
//                   float rotation;    // Offset:  380
//                   float2 offset;     // Offset:  384
//                   float2 scale;      // Offset:  392
//
//               } khr_texture_transform;// Offset:  376
//
//           } specular_texture;        // Offset:  368
//           float3 specular_color_factor;// Offset:  400
//           
//           struct TextureInfo
//           {
//               
//               int index;             // Offset:  412
//               int texcoord;          // Offset:  416
//               
//               struct KHRTextureTransform
//               {
//                   
//                   int texcoord;      // Offset:  420
//                   float rotation;    // Offset:  424
//                   float2 offset;     // Offset:  428
//                   float2 scale;      // Offset:  436
//
//               } khr_texture_transform;// Offset:  420
//
//           } specular_color_texture;  // Offset:  412
//
//       } specular;                    // Offset:  364
//       
//       struct KHRMaterialsIor
//       {
//           
//           float ior;                 // Offset:  444
//
//       } ior;                         // Offset:  444
//
//   } $Element;                        // Offset:    0 Size:   448
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// sampler_states[0]                 sampler      NA          NA             s0      1 
// sampler_states[1]                 sampler      NA          NA             s1      1 
// sampler_states[2]                 sampler      NA          NA             s2      1 
// materials                         texture  struct         r/o             t0      1 
// material_textures[0]              texture  float4          2d            t16      1 
// material_textures[1]              texture  float4          2d            t17      1 
// material_textures[2]              texture  float4          2d            t18      1 
// material_textures[3]              texture  float4          2d            t19      1 
// material_textures[4]              texture  float4          2d            t20      1 
// material_textures[9]              texture  float4          2d            t25      1 
// model_mask_texture                texture  float4          2d            t30      1 
// PRIMITIVE_CONSTANT_BUFFER         cbuffer      NA          NA            cb0      1 
// OBJECT_COLOR_CONSTANT_BUFFER      cbuffer      NA          NA            cb2      1 
// SCENE_CONSTANT_BUFFER             cbuffer      NA          NA            cb9      1 
// LIGHT_CONSTANT_BUFFER             cbuffer      NA          NA           cb10      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyzw        1     NONE   float   xyz 
// NORMAL                   0   xyzw        2     NONE   float   xyz 
// TANGENT                  0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 0   xy          4     NONE   float   xy  
// TEXCOORD                 1   xyz         5     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB9[10], immediateIndexed
dcl_constantbuffer CB10[3], immediateIndexed
dcl_constantbuffer CB0[5], immediateIndexed
dcl_constantbuffer CB2[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_structured t0, 448
dcl_resource_texture2d (float,float,float,float) t16
dcl_resource_texture2d (float,float,float,float) t17
dcl_resource_texture2d (float,float,float,float) t18
dcl_resource_texture2d (float,float,float,float) t19
dcl_resource_texture2d (float,float,float,float) t20
dcl_resource_texture2d (float,float,float,float) t25
dcl_resource_texture2d (float,float,float,float) t30
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xy
dcl_output o0.xyzw
dcl_temps 17
ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r0.xyzw, cb0[4].y, l(12), t0.xyzw
ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r1.xyzw, cb0[4].y, l(28), t0.wxyz
ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r2.x, cb0[4].y, l(52), t0.xxxx
ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r3.xyzw, cb0[4].y, l(64), t0.wxyz
ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r2.y, cb0[4].y, l(80), t0.xxxx
ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r2.z, cb0[4].y, l(112), t0.xxxx
ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r4.xyz, cb0[4].y, l(140), t0.xyzx
ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r2.w, cb0[4].y, l(184), t0.xxxx
ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r5.xyz, cb0[4].y, l(360), t0.xyzx
ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r6.xyzw, cb0[4].y, l(392), t0.xyzw
ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r7.xz, cb0[4].y, l(408), t0.yxxx
ilt r4.w, l(-1), r1.x
if_nz r4.w
  sincos r8.x, r9.x, r2.x
  mul r10.x, -r3.z, r8.x
  mul r10.w, r3.y, r8.x
  mul r10.yz, r3.yyzy, r9.xxxx
  dp2 r8.x, v4.xyxx, r10.ywyy
  dp2 r8.y, v4.xyxx, r10.xzxx
  sample_indexable(texture2d)(float,float,float,float) r8.xyzw, r8.xyxx, t16.xyzw, s2
  log r9.xyz, |r8.xyzx|
  mul r9.xyz, r9.xyzx, l(2.200000, 2.200000, 2.200000, 0.000000)
  exp r8.xyz, r9.xyzx
  mov r1.x, r0.w
  mul r8.xyzw, r1.xyzw, r8.xyzw
else 
  mov r8.x, r0.w
  mov r8.yzw, r1.yyzw
endif 
ilt r0.w, l(-1), r2.y
if_nz r0.w
  sincos r1.x, r9.x, r2.x
  mul r10.x, r1.x, -r3.z
  mul r10.w, r1.x, r3.y
  mul r10.yz, r3.yyzy, r9.xxxx
  dp2 r1.x, v4.xyxx, r10.ywyy
  dp2 r1.y, v4.xyxx, r10.xzxx
  sample_indexable(texture2d)(float,float,float,float) r1.xy, r1.xyxx, t17.yzxw, s2
  mul r1.xy, r1.xyxx, r3.xwxx
  mov r3.xw, r1.xxxy
endif 
ilt r0.w, l(-1), r2.w
if_nz r0.w
  ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r0.w, cb0[4].y, l(196), t0.xxxx
  ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r1.xy, cb0[4].y, l(208), t0.xyxx
  sincos r9.x, r10.x, r0.w
  mul r11.x, -r1.y, r9.x
  mul r11.w, r1.x, r9.x
  mul r11.yz, r1.xxyx, r10.xxxx
  dp2 r1.x, v4.xyxx, r11.ywyy
  dp2 r1.y, v4.xyxx, r11.xzxx
  sample_indexable(texture2d)(float,float,float,float) r9.xyzw, r1.xyxx, t19.xyzw, s2
  log r1.xyz, |r9.xyzx|
  mul r1.xyz, r1.xyzx, l(2.200000, 2.200000, 2.200000, 0.000000)
  exp r0.xyz, r1.xyzx
  mov r5.x, r9.w
endif 
ilt r0.w, l(-1), r4.z
if_nz r0.w
  sincos r1.x, r2.x, r2.x
  mul r9.x, r1.x, -r3.z
  mul r9.w, r1.x, r3.y
  mul r9.yz, r2.xxxx, r3.yyzy
  dp2 r1.x, v4.xyxx, r9.ywyy
  dp2 r1.y, v4.xyxx, r9.xzxx
  sample_indexable(texture2d)(float,float,float,float) r0.w, r1.xyxx, t20.yzwx, s2
else 
  mov r0.w, l(1.000000)
endif 
ilt r1.x, l(-1), r5.z
if_nz r1.x
  ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r1.x, cb0[4].y, l(424), t0.xxxx
  ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r1.yz, cb0[4].y, l(436), t0.xxyx
  sincos r1.x, r2.x, r1.x
  mul r9.x, r1.x, -r1.z
  mul r9.w, r1.x, r1.y
  mul r9.yz, r1.yyzy, r2.xxxx
  dp2 r1.x, v4.xyxx, r9.ywyy
  dp2 r1.y, v4.xyxx, r9.xzxx
  sample_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t25.wxyz, s1
  mul r5.y, r1.x, r5.y
endif 
ilt r1.x, l(-1), r7.x
if_nz r1.x
  ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r1.x, cb0[4].y, l(380), t0.xxxx
  sincos r1.x, r2.x, r1.x
  mul r9.x, r1.x, -r6.y
  mul r9.w, r1.x, r6.x
  mul r9.yz, r2.xxxx, r6.xxyx
  dp2 r1.x, v4.xyxx, r9.ywyy
  dp2 r1.y, v4.xyxx, r9.xzxx
  sample_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t25.xyzw, s1
  mov r7.yw, r6.zzzw
  mul r7.xyz, r1.xyzx, r7.ywzy
else 
  mov r7.xy, r6.zwzz
endif 
add r1.xyz, -v1.xyzx, cb9[9].xyzx
dp3 r2.x, r1.xyzx, r1.xyzx
rsq r2.x, r2.x
mul r6.xyz, r1.xyzx, r2.xxxx
dp3 r2.y, cb10[2].xyzx, cb10[2].xyzx
rsq r2.y, r2.y
mul r9.xyz, r2.yyyy, cb10[2].xyzx
dp3 r2.y, v2.xyzx, v2.xyzx
rsq r2.y, r2.y
mul r10.xyz, r2.yyyy, v2.xyzx
ilt r2.y, l(-1), r2.z
if_nz r2.y
  ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r11.x, cb0[4].y, l(120), t0.xxxx
  ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r2.y, cb0[4].y, l(128), t0.xxxx
  dp3 r2.z, v3.xyzx, v3.xyzx
  rsq r2.z, r2.z
  mul r12.xyz, r2.zzzz, v3.xyzx
  movc r12.xyz, cb0[4].xxxx, r12.xyzx, l(1.000000,0,0,0)
  movc r2.z, cb0[4].x, v3.w, l(1.000000)
  dp3 r2.w, r10.xyzx, r12.xyzx
  mad r12.xyz, -r10.xyzx, r2.wwww, r12.xyzx
  dp3 r2.w, r12.xyzx, r12.xyzx
  rsq r2.w, r2.w
  mul r12.xyz, r2.wwww, r12.xyzx
  mul r13.xyz, r10.zxyz, r12.yzxy
  mad r13.xyz, r10.yzxy, r12.zxyz, -r13.xyzx
  mul r13.xyz, r2.zzzz, r13.xyzx
  dp3 r2.z, r13.xyzx, r13.xyzx
  rsq r2.z, r2.z
  mul r13.xyz, r2.zzzz, r13.xyzx
  sincos r14.x, r15.x, r2.y
  mul r16.x, -r4.y, r14.x
  mul r16.w, r4.x, r14.x
  mul r16.yz, r4.xxyx, r15.xxxx
  dp2 r4.x, v4.xyxx, r16.ywyy
  dp2 r4.y, v4.xyxx, r16.xzxx
  sample_indexable(texture2d)(float,float,float,float) r2.yzw, r4.xyxx, t18.wxyz, s1
  mad r2.yzw, r2.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
  mov r11.y, l(1.000000)
  mul r2.yzw, r2.yyzw, r11.xxxy
  dp3 r3.y, r2.yzwy, r2.yzwy
  rsq r3.y, r3.y
  mul r2.yzw, r2.yyzw, r3.yyyy
  mul r4.xyz, r13.xyzx, r2.zzzz
  mad r4.xyz, r2.yyyy, r12.xyzx, r4.xyzx
  mad r2.yzw, r2.wwww, r10.xxyz, r4.xxyz
  dp3 r3.y, r2.yzwy, r2.yzwy
  rsq r3.y, r3.y
  mul r10.xyz, r2.yzwy, r3.yyyy
endif 
dp3 r2.y, r10.xyzx, r9.xyzx
dp3 r2.z, r10.xyzx, r6.xyzx
max r2.yz, r2.yyzy, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r2.w, l(0.000000), r2.y
lt r3.y, l(0.000000), r2.z
or r2.w, r2.w, r3.y
if_nz r2.w
  add r4.xyz, r8.xyzx, l(-0.040000, -0.040000, -0.040000, 0.000000)
  mad r4.xyz, r3.wwww, r4.xyzx, l(0.040000, 0.040000, 0.040000, 0.000000)
  mul r2.w, r3.x, r3.x
  mul r3.xyz, r7.xyzx, r4.xyzx
  min r3.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  add r4.xyz, -r3.xyzx, r8.xyzx
  mad r3.xyz, r3.wwww, r4.xyzx, r3.xyzx
  mad r4.xyz, r3.wwww, -r8.xyzx, r8.xyzx
  mad r1.xyz, r1.xyzx, r2.xxxx, r9.xyzx
  dp3 r2.x, r1.xyzx, r1.xyzx
  rsq r2.x, r2.x
  mul r1.xyz, r1.xyzx, r2.xxxx
  dp3 r2.x, r10.xyzx, r1.xyzx
  max r2.x, r2.x, l(0.000000)
  dp3 r3.w, r1.xyzx, r6.xyzx
  max r4.w, r3.w, l(0.000000)
  add r6.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  add r4.w, -r4.w, l(1.000000)
  max r4.w, r4.w, l(0.000000)
  mul r5.z, r4.w, r4.w
  mul r5.z, r5.z, r5.z
  mul r4.w, r4.w, r5.z
  mad r3.xyz, r6.xyzx, r4.wwww, r3.xyzx
  add r6.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r4.xyz, r4.xyzx, r6.xyzx
  mul r4.xyz, r2.yyyy, r4.xyzx
  mul r4.xyz, r4.xyzx, l(0.318310, 0.318310, 0.318310, 0.000000)
  dp3 r1.x, r1.xyzx, r9.xyzx
  mul r1.y, r2.w, r2.w
  mul r1.z, r2.z, r2.z
  mad r4.w, -r2.w, r2.w, l(1.000000)
  mad r1.z, r1.z, r4.w, r1.y
  sqrt r1.z, r1.z
  mul r5.z, r2.y, r2.y
  mad r1.y, r5.z, r4.w, r1.y
  sqrt r1.y, r1.y
  mul r1.yz, r1.yyzy, r2.zzyz
  mul r1.y, r1.y, r1.z
  mul r1.x, r3.w, r1.x
  lt r1.z, l(0.000000), r1.y
  div r1.x, r1.x, r1.y
  and r1.x, r1.x, r1.z
  mul r1.y, r2.x, r2.x
  mad r1.z, r2.w, r2.w, l(-1.000000)
  mad r1.y, r1.y, r1.z, l(1.000000)
  mad r1.z, r2.w, r2.w, r2.x
  mul r1.y, r1.y, r1.y
  mul r1.y, r1.y, l(3.141592)
  div r1.y, r1.z, r1.y
  mul r2.xzw, r1.xxxx, r3.xxyz
  mul r1.xyz, r1.yyyy, r2.xzwx
  mul r1.xyz, r1.xyzx, r2.yyyy
else 
  mov r4.xyz, l(0,0,0,0)
  mov r1.xyz, l(0,0,0,0)
endif 
lt r2.x, r8.w, l(0.010000)
discard_nz r2.x
ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r2.x, cb0[4].y, l(156), t0.xxxx
mad r2.yzw, r7.xxyz, r5.yyyy, r1.xxyz
mul r1.xyz, r1.xyzx, r2.yzwy
mad r2.yzw, r4.xxyz, r0.wwww, -r4.xxyz
add r3.xyz, r4.xyzx, r4.xyzx
mad r2.yzw, r2.xxxx, r2.yyzw, r3.xxyz
mad r3.xyz, r1.xyzx, r0.wwww, -r1.xyzx
add r1.xyz, r1.xyzx, r1.xyzx
mad r1.xyz, r2.xxxx, r3.xyzx, r1.xyzx
add r1.xyz, r1.xyzx, r2.yzwy
mad r0.xyz, r0.xyzx, r5.xxxx, r1.xyzx
mul r0.xyz, r0.xyzx, cb2[0].xyzx
mov r8.xyz, cb2[0].xyzx
mov r0.w, r8.w
mad r0.xyzw, r8.xyzw, cb2[0].wwww, r0.xyzw
sample_indexable(texture2d)(float,float,float,float) r1.x, v4.xyxx, t30.xyzw, s0
ge r1.x, cb2[1].x, r1.x
and r1.x, r1.x, l(0x3f800000)
mul r1.x, r1.w, r1.x
mul o0.w, r0.w, r1.x
mov o0.xyz, r0.xyzx
ret 
// Approximately 234 instruction slots used
