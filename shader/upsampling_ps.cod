//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer BLOOM_CONSTANT_BUFFER
// {
//
//   uint downsampled_count;            // Offset:    0 Size:     4
//   uint3 cbbloom_ipad;                // Offset:    4 Size:    12 [unused]
//   float bloom_extraction_threshold;  // Offset:   16 Size:     4 [unused]
//   float bloom_intensity;             // Offset:   20 Size:     4
//   float smooth_rate;                 // Offset:   24 Size:     4 [unused]
//   float cbbloom_fpad;                // Offset:   28 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// sampler_states[1]                 sampler      NA          NA             s1      1 
// downsampled_textures[0]           texture  float4          2d             t0      1 
// downsampled_textures[1]           texture  float4          2d             t1      1 
// downsampled_textures[2]           texture  float4          2d             t2      1 
// downsampled_textures[3]           texture  float4          2d             t3      1 
// downsampled_textures[4]           texture  float4          2d             t4      1 
// downsampled_textures[5]           texture  float4          2d             t5      1 
// downsampled_textures[6]           texture  float4          2d             t6      1 
// downsampled_textures[7]           texture  float4          2d             t7      1 
// downsampled_textures[8]           texture  float4          2d             t8      1 
// downsampled_textures[9]           texture  float4          2d             t9      1 
// downsampled_textures[10]          texture  float4          2d            t10      1 
// downsampled_textures[11]          texture  float4          2d            t11      1 
// BLOOM_CONSTANT_BUFFER             cbuffer      NA          NA            cb8      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float       
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB8[2], immediateIndexed
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_resource_texture2d (float,float,float,float) t10
dcl_resource_texture2d (float,float,float,float) t11
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 2
if_nz cb8[0].x
  sample_indexable(texture2d)(float,float,float,float) r0.xyz, v2.xyxx, t0.xyzw, s1
  mov r0.w, l(1)
else 
  mov r0.xyzw, l(0,0,0,0)
endif 
ult r1.x, r0.w, cb8[0].x
if_nz r1.x
  sample_indexable(texture2d)(float,float,float,float) r1.yzw, v2.xyxx, t1.wxyz, s1
  add r0.xyz, r0.xyzx, r1.yzwy
  mov r0.w, l(2)
endif 
ult r1.y, r0.w, cb8[0].x
and r1.x, r1.y, r1.x
if_nz r1.x
  sample_indexable(texture2d)(float,float,float,float) r1.yzw, v2.xyxx, t2.wxyz, s1
  add r0.xyz, r0.xyzx, r1.yzwy
  mov r0.w, l(3)
endif 
ult r1.y, r0.w, cb8[0].x
and r1.x, r1.y, r1.x
if_nz r1.x
  sample_indexable(texture2d)(float,float,float,float) r1.yzw, v2.xyxx, t3.wxyz, s1
  add r0.xyz, r0.xyzx, r1.yzwy
  mov r0.w, l(4)
endif 
ult r1.y, r0.w, cb8[0].x
and r1.x, r1.y, r1.x
if_nz r1.x
  sample_indexable(texture2d)(float,float,float,float) r1.yzw, v2.xyxx, t4.wxyz, s1
  add r0.xyz, r0.xyzx, r1.yzwy
  mov r0.w, l(5)
endif 
ult r1.y, r0.w, cb8[0].x
and r1.x, r1.y, r1.x
if_nz r1.x
  sample_indexable(texture2d)(float,float,float,float) r1.yzw, v2.xyxx, t5.wxyz, s1
  add r0.xyz, r0.xyzx, r1.yzwy
  mov r0.w, l(6)
endif 
ult r1.y, r0.w, cb8[0].x
and r1.x, r1.y, r1.x
if_nz r1.x
  sample_indexable(texture2d)(float,float,float,float) r1.yzw, v2.xyxx, t6.wxyz, s1
  add r0.xyz, r0.xyzx, r1.yzwy
  mov r0.w, l(7)
endif 
ult r1.y, r0.w, cb8[0].x
and r1.x, r1.y, r1.x
if_nz r1.x
  sample_indexable(texture2d)(float,float,float,float) r1.yzw, v2.xyxx, t7.wxyz, s1
  add r0.xyz, r0.xyzx, r1.yzwy
  mov r0.w, l(8)
endif 
ult r1.y, r0.w, cb8[0].x
and r1.x, r1.y, r1.x
if_nz r1.x
  sample_indexable(texture2d)(float,float,float,float) r1.yzw, v2.xyxx, t8.wxyz, s1
  add r0.xyz, r0.xyzx, r1.yzwy
  mov r0.w, l(9)
endif 
ult r1.y, r0.w, cb8[0].x
and r1.x, r1.y, r1.x
if_nz r1.x
  sample_indexable(texture2d)(float,float,float,float) r1.yzw, v2.xyxx, t9.wxyz, s1
  add r0.xyz, r0.xyzx, r1.yzwy
  mov r0.w, l(10)
endif 
ult r1.y, r0.w, cb8[0].x
and r1.x, r1.y, r1.x
if_nz r1.x
  sample_indexable(texture2d)(float,float,float,float) r1.yzw, v2.xyxx, t10.wxyz, s1
  add r0.xyz, r0.xyzx, r1.yzwy
  mov r0.w, l(11)
endif 
ult r0.w, r0.w, cb8[0].x
and r0.w, r0.w, r1.x
if_nz r0.w
  sample_indexable(texture2d)(float,float,float,float) r1.xyz, v2.xyxx, t11.xyzw, s1
  add r0.xyz, r0.xyzx, r1.xyzx
endif 
mul o0.xyz, r0.xyzx, cb8[1].yyyy
mov o0.w, l(1.000000)
ret 
// Approximately 84 instruction slots used
