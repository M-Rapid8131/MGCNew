//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PRIMITIVE_CONSTANT_BUFFER
// {
//
//   row_major float4x4 world;          // Offset:    0 Size:    64 [unused]
//   int has_tangent;                   // Offset:   64 Size:     4 [unused]
//   int material;                      // Offset:   68 Size:     4
//   int skin;                          // Offset:   72 Size:     4 [unused]
//   int cbprimitive_ipad;              // Offset:   76 Size:     4 [unused]
//
// }
//
// cbuffer OBJECT_COLOR_CONSTANT_BUFFER
// {
//
//   float3 object_color;               // Offset:    0 Size:    12
//   float blink_factor;                // Offset:   12 Size:     4 [unused]
//   float object_disolve;              // Offset:   16 Size:     4
//   float3 cbobject_color_fpad;        // Offset:   20 Size:    12 [unused]
//
// }
//
// Resource bind info for materials
// {
//
//   struct SbMaterial
//   {
//       
//       bool double_sided;             // Offset:    0
//       int alpha_mode;                // Offset:    4
//       float alpha_cutoff;            // Offset:    8
//       float3 emissive_factor;        // Offset:   12
//       
//       struct PbrMetallicRoughness
//       {
//           
//           float4 basecolor_factor;   // Offset:   24
//           
//           struct TextureInfo
//           {
//               
//               int index;             // Offset:   40
//               int texcoord;          // Offset:   44
//               
//               struct KHRTextureTransform
//               {
//                   
//                   int texcoord;      // Offset:   48
//                   float rotation;    // Offset:   52
//                   float2 offset;     // Offset:   56
//                   float2 scale;      // Offset:   64
//
//               } khr_texture_transform;// Offset:   48
//
//           } basecolor_texture;       // Offset:   40
//           float metallic_factor;     // Offset:   72
//           float roughness_factor;    // Offset:   76
//           
//           struct TextureInfo
//           {
//               
//               int index;             // Offset:   80
//               int texcoord;          // Offset:   84
//               
//               struct KHRTextureTransform
//               {
//                   
//                   int texcoord;      // Offset:   88
//                   float rotation;    // Offset:   92
//                   float2 offset;     // Offset:   96
//                   float2 scale;      // Offset:  104
//
//               } khr_texture_transform;// Offset:   88
//
//           } metallic_roughness_texture;// Offset:   80
//
//       } pbr_metallic_roughness;      // Offset:   24
//       
//       struct NormalTextureInfo
//       {
//           
//           int index;                 // Offset:  112
//           int texcoord;              // Offset:  116
//           float scale;               // Offset:  120
//           
//           struct KHRTextureTransform
//           {
//               
//               int texcoord;          // Offset:  124
//               float rotation;        // Offset:  128
//               float2 offset;         // Offset:  132
//               float2 scale;          // Offset:  140
//
//           } khr_texture_transform;   // Offset:  124
//
//       } normal_texture;              // Offset:  112
//       
//       struct OcculusionTextureInfo
//       {
//           
//           int index;                 // Offset:  148
//           int texcoord;              // Offset:  152
//           float strength;            // Offset:  156
//           
//           struct KHRTextureTransform
//           {
//               
//               int texcoord;          // Offset:  160
//               float rotation;        // Offset:  164
//               float2 offset;         // Offset:  168
//               float2 scale;          // Offset:  176
//
//           } khr_texture_transform;   // Offset:  160
//
//       } occulusion_texture;          // Offset:  148
//       
//       struct TextureInfo
//       {
//           
//           int index;                 // Offset:  184
//           int texcoord;              // Offset:  188
//           
//           struct KHRTextureTransform
//           {
//               
//               int texcoord;          // Offset:  192
//               float rotation;        // Offset:  196
//               float2 offset;         // Offset:  200
//               float2 scale;          // Offset:  208
//
//           } khr_texture_transform;   // Offset:  192
//
//       } emissive_texture;            // Offset:  184
//       
//       struct KHRMaterialsClearcoat
//       {
//           
//           float clearcoat_factor;    // Offset:  216
//           
//           struct TextureInfo
//           {
//               
//               int index;             // Offset:  220
//               int texcoord;          // Offset:  224
//               
//               struct KHRTextureTransform
//               {
//                   
//                   int texcoord;      // Offset:  228
//                   float rotation;    // Offset:  232
//                   float2 offset;     // Offset:  236
//                   float2 scale;      // Offset:  244
//
//               } khr_texture_transform;// Offset:  228
//
//           } clearcoat_texture;       // Offset:  220
//           float clearcoat_roughness_factor;// Offset:  252
//           
//           struct TextureInfo
//           {
//               
//               int index;             // Offset:  256
//               int texcoord;          // Offset:  260
//               
//               struct KHRTextureTransform
//               {
//                   
//                   int texcoord;      // Offset:  264
//                   float rotation;    // Offset:  268
//                   float2 offset;     // Offset:  272
//                   float2 scale;      // Offset:  280
//
//               } khr_texture_transform;// Offset:  264
//
//           } clearcoat_roughness_texture;// Offset:  256
//           
//           struct NormalTextureInfo
//           {
//               
//               int index;             // Offset:  288
//               int texcoord;          // Offset:  292
//               float scale;           // Offset:  296
//               
//               struct KHRTextureTransform
//               {
//                   
//                   int texcoord;      // Offset:  300
//                   float rotation;    // Offset:  304
//                   float2 offset;     // Offset:  308
//                   float2 scale;      // Offset:  316
//
//               } khr_texture_transform;// Offset:  300
//
//           } clearcoat_normal_texture;// Offset:  288
//
//       } clearcoat;                   // Offset:  216
//       
//       struct KHRMaterialsTransmission
//       {
//           
//           float transmission_factor; // Offset:  324
//           
//           struct TextureInfo
//           {
//               
//               int index;             // Offset:  328
//               int texcoord;          // Offset:  332
//               
//               struct KHRTextureTransform
//               {
//                   
//                   int texcoord;      // Offset:  336
//                   float rotation;    // Offset:  340
//                   float2 offset;     // Offset:  344
//                   float2 scale;      // Offset:  352
//
//               } khr_texture_transform;// Offset:  336
//
//           } transmission_texture;    // Offset:  328
//
//       } transmission;                // Offset:  324
//       
//       struct KHRMaterialsEmissiveStrength
//       {
//           
//           float emissive_strength;   // Offset:  360
//
//       } emissive_strength;           // Offset:  360
//       
//       struct KHRMaterialsSpecular
//       {
//           
//           float specular_factor;     // Offset:  364
//           
//           struct TextureInfo
//           {
//               
//               int index;             // Offset:  368
//               int texcoord;          // Offset:  372
//               
//               struct KHRTextureTransform
//               {
//                   
//                   int texcoord;      // Offset:  376
//                   float rotation;    // Offset:  380
//                   float2 offset;     // Offset:  384
//                   float2 scale;      // Offset:  392
//
//               } khr_texture_transform;// Offset:  376
//
//           } specular_texture;        // Offset:  368
//           float3 specular_color_factor;// Offset:  400
//           
//           struct TextureInfo
//           {
//               
//               int index;             // Offset:  412
//               int texcoord;          // Offset:  416
//               
//               struct KHRTextureTransform
//               {
//                   
//                   int texcoord;      // Offset:  420
//                   float rotation;    // Offset:  424
//                   float2 offset;     // Offset:  428
//                   float2 scale;      // Offset:  436
//
//               } khr_texture_transform;// Offset:  420
//
//           } specular_color_texture;  // Offset:  412
//
//       } specular;                    // Offset:  364
//       
//       struct KHRMaterialsIor
//       {
//           
//           float ior;                 // Offset:  444
//
//       } ior;                         // Offset:  444
//
//   } $Element;                        // Offset:    0 Size:   448
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// sampler_states[2]                 sampler      NA          NA             s2      1 
// materials                         texture  struct         r/o             t0      1 
// material_textures[0]              texture  float4          2d            t16      1 
// material_textures[3]              texture  float4          2d            t19      1 
// PRIMITIVE_CONSTANT_BUFFER         cbuffer      NA          NA            cb0      1 
// OBJECT_COLOR_CONSTANT_BUFFER      cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyzw        1     NONE   float       
// NORMAL                   0   xyzw        2     NONE   float       
// TANGENT                  0   xyzw        3     NONE   float       
// TEXCOORD                 0   xy          4     NONE   float   xy  
// TEXCOORD                 1   xyz         5     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[5], immediateIndexed
dcl_constantbuffer CB2[2], immediateIndexed
dcl_sampler s2, mode_default
dcl_resource_structured t0, 448
dcl_resource_texture2d (float,float,float,float) t16
dcl_resource_texture2d (float,float,float,float) t19
dcl_input_ps linear v4.xy
dcl_output o0.xyzw
dcl_temps 5
ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r0.xy, cb0[4].y, l(36), t0.xyxx
ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r0.z, cb0[4].y, l(184), t0.xxxx
ilt r0.y, l(-1), r0.y
if_nz r0.y
  ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r0.y, cb0[4].y, l(52), t0.xxxx
  ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r1.xy, cb0[4].y, l(64), t0.xyxx
  sincos r2.x, r3.x, r0.y
  mul r4.x, -r1.y, r2.x
  mul r4.w, r1.x, r2.x
  mul r4.yz, r1.xxyx, r3.xxxx
  dp2 r1.x, v4.xyxx, r4.ywyy
  dp2 r1.y, v4.xyxx, r4.xzxx
  sample_indexable(texture2d)(float,float,float,float) r0.y, r1.xyxx, t16.xwyz, s2
  mul r0.x, r0.y, r0.x
endif 
ilt r0.y, l(-1), r0.z
if_nz r0.y
  ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r0.y, cb0[4].y, l(196), t0.xxxx
  ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r0.zw, cb0[4].y, l(208), t0.xxxy
  sincos r1.x, r2.x, r0.y
  mul r3.x, -r0.w, r1.x
  mul r3.w, r0.z, r1.x
  mul r3.yz, r0.zzwz, r2.xxxx
  dp2 r1.x, v4.xyxx, r3.ywyy
  dp2 r1.y, v4.xyxx, r3.xzxx
  sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyxx, t19.xyzw, s2
  log r0.yzw, |r1.xxyz|
  mul r0.yzw, r0.yyzw, l(0.000000, 2.200000, 2.200000, 2.200000)
  exp r0.yzw, r0.yyzw
  mov o0.w, r1.w
else 
  ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r0.yzw, cb0[4].y, l(12), t0.xxyz
  ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) o0.w, cb0[4].y, l(360), t0.xxxx
endif 
lt r0.x, r0.x, l(0.010000)
discard_nz r0.x
mul r0.xyz, r0.yzwy, cb2[0].xyzx
mul o0.xyz, r0.xyzx, cb2[1].xxxx
ret 
// Approximately 39 instruction slots used
