//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PRIMITIVE_CONSTANT_BUFFER
// {
//
//   row_major float4x4 world;          // Offset:    0 Size:    64 [unused]
//   int has_tangent;                   // Offset:   64 Size:     4 [unused]
//   int material;                      // Offset:   68 Size:     4
//   int skin;                          // Offset:   72 Size:     4 [unused]
//   int cbprimitive_ipad;              // Offset:   76 Size:     4 [unused]
//
// }
//
// cbuffer OBJECT_COLOR_CONSTANT_BUFFER
// {
//
//   float3 object_color;               // Offset:    0 Size:    12
//   float blink_factor;                // Offset:   12 Size:     4 [unused]
//   float object_disolve;              // Offset:   16 Size:     4 [unused]
//   float3 cbobject_color_fpad;        // Offset:   20 Size:    12 [unused]
//
// }
//
// cbuffer PARTICLE_EMITTER_CONSTANT_BUFFER
// {
//
//   uint emit_amounts;                 // Offset:    0 Size:     4 [unused]
//   uint random_color;                 // Offset:    4 Size:     4 [unused]
//   uint disable;                      // Offset:    8 Size:     4 [unused]
//   uint cbparticle_emitter_ipad;      // Offset:   12 Size:     4 [unused]
//   float3 emit_position;              // Offset:   16 Size:    12 [unused]
//   float emit_speed;                  // Offset:   28 Size:     4 [unused]
//   float3 emit_force;                 // Offset:   32 Size:    12 [unused]
//   float emit_accel;                  // Offset:   44 Size:     4 [unused]
//   float3 emit_direction;             // Offset:   48 Size:    12 [unused]
//   float spread_rate;                 // Offset:   60 Size:     4 [unused]
//   float4 emit_color;                 // Offset:   64 Size:    16 [unused]
//   float emit_size;                   // Offset:   80 Size:     4
//   float life_time;                   // Offset:   84 Size:     4
//   float start_diff;                  // Offset:   88 Size:     4 [unused]
//   float emit_radius;                 // Offset:   92 Size:     4 [unused]
//
// }
//
// Resource bind info for materials
// {
//
//   struct SbMaterial
//   {
//       
//       bool double_sided;             // Offset:    0
//       int alpha_mode;                // Offset:    4
//       float alpha_cutoff;            // Offset:    8
//       float3 emissive_factor;        // Offset:   12
//       
//       struct PbrMetallicRoughness
//       {
//           
//           float4 basecolor_factor;   // Offset:   24
//           
//           struct TextureInfo
//           {
//               
//               int index;             // Offset:   40
//               int texcoord;          // Offset:   44
//               
//               struct KHRTextureTransform
//               {
//                   
//                   int texcoord;      // Offset:   48
//                   float rotation;    // Offset:   52
//                   float2 offset;     // Offset:   56
//                   float2 scale;      // Offset:   64
//
//               } khr_texture_transform;// Offset:   48
//
//           } basecolor_texture;       // Offset:   40
//           float metallic_factor;     // Offset:   72
//           float roughness_factor;    // Offset:   76
//           
//           struct TextureInfo
//           {
//               
//               int index;             // Offset:   80
//               int texcoord;          // Offset:   84
//               
//               struct KHRTextureTransform
//               {
//                   
//                   int texcoord;      // Offset:   88
//                   float rotation;    // Offset:   92
//                   float2 offset;     // Offset:   96
//                   float2 scale;      // Offset:  104
//
//               } khr_texture_transform;// Offset:   88
//
//           } metallic_roughness_texture;// Offset:   80
//
//       } pbr_metallic_roughness;      // Offset:   24
//       
//       struct NormalTextureInfo
//       {
//           
//           int index;                 // Offset:  112
//           int texcoord;              // Offset:  116
//           float scale;               // Offset:  120
//           
//           struct KHRTextureTransform
//           {
//               
//               int texcoord;          // Offset:  124
//               float rotation;        // Offset:  128
//               float2 offset;         // Offset:  132
//               float2 scale;          // Offset:  140
//
//           } khr_texture_transform;   // Offset:  124
//
//       } normal_texture;              // Offset:  112
//       
//       struct OcculusionTextureInfo
//       {
//           
//           int index;                 // Offset:  148
//           int texcoord;              // Offset:  152
//           float strength;            // Offset:  156
//           
//           struct KHRTextureTransform
//           {
//               
//               int texcoord;          // Offset:  160
//               float rotation;        // Offset:  164
//               float2 offset;         // Offset:  168
//               float2 scale;          // Offset:  176
//
//           } khr_texture_transform;   // Offset:  160
//
//       } occulusion_texture;          // Offset:  148
//       
//       struct TextureInfo
//       {
//           
//           int index;                 // Offset:  184
//           int texcoord;              // Offset:  188
//           
//           struct KHRTextureTransform
//           {
//               
//               int texcoord;          // Offset:  192
//               float rotation;        // Offset:  196
//               float2 offset;         // Offset:  200
//               float2 scale;          // Offset:  208
//
//           } khr_texture_transform;   // Offset:  192
//
//       } emissive_texture;            // Offset:  184
//       
//       struct KHRMaterialsClearcoat
//       {
//           
//           float clearcoat_factor;    // Offset:  216
//           
//           struct TextureInfo
//           {
//               
//               int index;             // Offset:  220
//               int texcoord;          // Offset:  224
//               
//               struct KHRTextureTransform
//               {
//                   
//                   int texcoord;      // Offset:  228
//                   float rotation;    // Offset:  232
//                   float2 offset;     // Offset:  236
//                   float2 scale;      // Offset:  244
//
//               } khr_texture_transform;// Offset:  228
//
//           } clearcoat_texture;       // Offset:  220
//           float clearcoat_roughness_factor;// Offset:  252
//           
//           struct TextureInfo
//           {
//               
//               int index;             // Offset:  256
//               int texcoord;          // Offset:  260
//               
//               struct KHRTextureTransform
//               {
//                   
//                   int texcoord;      // Offset:  264
//                   float rotation;    // Offset:  268
//                   float2 offset;     // Offset:  272
//                   float2 scale;      // Offset:  280
//
//               } khr_texture_transform;// Offset:  264
//
//           } clearcoat_roughness_texture;// Offset:  256
//           
//           struct NormalTextureInfo
//           {
//               
//               int index;             // Offset:  288
//               int texcoord;          // Offset:  292
//               float scale;           // Offset:  296
//               
//               struct KHRTextureTransform
//               {
//                   
//                   int texcoord;      // Offset:  300
//                   float rotation;    // Offset:  304
//                   float2 offset;     // Offset:  308
//                   float2 scale;      // Offset:  316
//
//               } khr_texture_transform;// Offset:  300
//
//           } clearcoat_normal_texture;// Offset:  288
//
//       } clearcoat;                   // Offset:  216
//       
//       struct KHRMaterialsTransmission
//       {
//           
//           float transmission_factor; // Offset:  324
//           
//           struct TextureInfo
//           {
//               
//               int index;             // Offset:  328
//               int texcoord;          // Offset:  332
//               
//               struct KHRTextureTransform
//               {
//                   
//                   int texcoord;      // Offset:  336
//                   float rotation;    // Offset:  340
//                   float2 offset;     // Offset:  344
//                   float2 scale;      // Offset:  352
//
//               } khr_texture_transform;// Offset:  336
//
//           } transmission_texture;    // Offset:  328
//
//       } transmission;                // Offset:  324
//       
//       struct KHRMaterialsEmissiveStrength
//       {
//           
//           float emissive_strength;   // Offset:  360
//
//       } emissive_strength;           // Offset:  360
//       
//       struct KHRMaterialsSpecular
//       {
//           
//           float specular_factor;     // Offset:  364
//           
//           struct TextureInfo
//           {
//               
//               int index;             // Offset:  368
//               int texcoord;          // Offset:  372
//               
//               struct KHRTextureTransform
//               {
//                   
//                   int texcoord;      // Offset:  376
//                   float rotation;    // Offset:  380
//                   float2 offset;     // Offset:  384
//                   float2 scale;      // Offset:  392
//
//               } khr_texture_transform;// Offset:  376
//
//           } specular_texture;        // Offset:  368
//           float3 specular_color_factor;// Offset:  400
//           
//           struct TextureInfo
//           {
//               
//               int index;             // Offset:  412
//               int texcoord;          // Offset:  416
//               
//               struct KHRTextureTransform
//               {
//                   
//                   int texcoord;      // Offset:  420
//                   float rotation;    // Offset:  424
//                   float2 offset;     // Offset:  428
//                   float2 scale;      // Offset:  436
//
//               } khr_texture_transform;// Offset:  420
//
//           } specular_color_texture;  // Offset:  412
//
//       } specular;                    // Offset:  364
//       
//       struct KHRMaterialsIor
//       {
//           
//           float ior;                 // Offset:  444
//
//       } ior;                         // Offset:  444
//
//   } $Element;                        // Offset:    0 Size:   448
//
// }
//
// Resource bind info for append_particle_buffer
// {
//
//   struct Particle
//   {
//       
//       uint particle_index;           // Offset:    0
//       float3 position;               // Offset:    4
//       float size;                    // Offset:   16
//       float4 color;                  // Offset:   20
//       float3 velocity;               // Offset:   36
//       float3 acceleration;           // Offset:   48
//       float3 normal;                 // Offset:   60
//       float life;                    // Offset:   72
//       float start_time;              // Offset:   76
//
//   } $Element;                        // Offset:    0 Size:    80
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// sampler_states[2]                 sampler      NA          NA             s2      1 
// materials                         texture  struct         r/o             t0      1 
// material_textures[0]              texture  float4          2d            t16      1 
// append_particle_buffer                UAV  struct      append             u1      1 
// PRIMITIVE_CONSTANT_BUFFER         cbuffer      NA          NA            cb0      1 
// OBJECT_COLOR_CONSTANT_BUFFER      cbuffer      NA          NA            cb2      1 
// PARTICLE_EMITTER_CONSTANT_BUFFER    cbuffer      NA          NA            cb5      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyzw        1     NONE   float   xyz 
// NORMAL                   0   xyzw        2     NONE   float   xyz 
// TANGENT                  0   xyzw        3     NONE   float       
// TEXCOORD                 0   xy          4     NONE   float   xy  
// TEXCOORD                 1   xyz         5     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[5], immediateIndexed
dcl_constantbuffer CB2[1], immediateIndexed
dcl_constantbuffer CB5[6], immediateIndexed
dcl_sampler s2, mode_default
dcl_resource_structured t0, 448
dcl_resource_texture2d (float,float,float,float) t16
dcl_uav_structured u1, 80
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v4.xy
dcl_temps 7
//
// Initial variable locations:
//   v0.x <- model_pin.position.x; v0.y <- model_pin.position.y; v0.z <- model_pin.position.z; v0.w <- model_pin.position.w; 
//   v1.x <- model_pin.w_position.x; v1.y <- model_pin.w_position.y; v1.z <- model_pin.w_position.z; v1.w <- model_pin.w_position.w; 
//   v2.x <- model_pin.w_normal.x; v2.y <- model_pin.w_normal.y; v2.z <- model_pin.w_normal.z; v2.w <- model_pin.w_normal.w; 
//   v3.x <- model_pin.w_tangent.x; v3.y <- model_pin.w_tangent.y; v3.z <- model_pin.w_tangent.z; v3.w <- model_pin.w_tangent.w; 
//   v4.x <- model_pin.texcoord.x; v4.y <- model_pin.texcoord.y; 
//   v5.x <- model_pin.shadow_texcoord.x; v5.y <- model_pin.shadow_texcoord.y; v5.z <- model_pin.shadow_texcoord.z
//
#line 14 "C:\General\GR4GA_NISHIOKA\MAGIC COLOR STONE\MGCNew\LightBlueEngine\HLSL\Particle\accumulate_particle_ps.hlsl"
mov r0.x, cb0[4].y
ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r0.y, r0.x, l(36), t0.xxxx  // r0.y <- MATERIAL.pbr_metallic_roughness.basecolor_factor.w
ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r0.z, r0.x, l(40), t0.xxxx  // r0.z <- MATERIAL.pbr_metallic_roughness.basecolor_texture.index
ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r1.x, r0.x, l(52), t0.xxxx  // r1.x <- MATERIAL.pbr_metallic_roughness.basecolor_texture.khr_texture_transform.rotation
ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r1.y, r0.x, l(64), t0.xxxx  // r1.y <- MATERIAL.pbr_metallic_roughness.basecolor_texture.khr_texture_transform.scale.x
ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r1.z, r0.x, l(68), t0.xxxx  // r1.z <- MATERIAL.pbr_metallic_roughness.basecolor_texture.khr_texture_transform.scale.y
ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r2.x, r0.x, l(80), t0.xxxx  // r2.x <- MATERIAL.pbr_metallic_roughness.metallic_roughness_texture.index
ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r2.y, r0.x, l(148), t0.xxxx  // r2.y <- MATERIAL.occulusion_texture.index
ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r2.z, r0.x, l(184), t0.xxxx  // r2.z <- MATERIAL.emissive_texture.index
ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r2.w, r0.x, l(220), t0.xxxx  // r2.w <- MATERIAL.clearcoat.clearcoat_texture.index
ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r3.x, r0.x, l(256), t0.xxxx  // r3.x <- MATERIAL.clearcoat.clearcoat_roughness_texture.index
ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r3.y, r0.x, l(328), t0.xxxx  // r3.y <- MATERIAL.transmission.transmission_texture.index
ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r3.z, r0.x, l(368), t0.xxxx  // r3.z <- MATERIAL.specular.specular_texture.index
ld_structured_indexable(structured_buffer, stride=448)(mixed,mixed,mixed,mixed) r3.w, r0.x, l(412), t0.xxxx  // r3.w <- MATERIAL.specular.specular_color_texture.index

#line 16
nop 
mov r2.xyzw, r2.xyzw
mov r3.xyzw, r3.xyzw
mov r1.xyz, r1.xyzx
mov r0.yz, r0.yyzy
mov r4.xy, v4.xyxx

#line 83 "C:\General\GR4GA_NISHIOKA\MAGIC COLOR STONE\MGCNew\LightBlueEngine\HLSL\3D\3D_utility\material_data.hlsli"
mov r0.y, r0.y  // r0.y <- basecolor.w

#line 85
ilt r0.x, l(-1), r0.z
if_nz r0.x

#line 87
  nop 
  mov r4.xy, r4.xyxx
  mov r1.xyz, r1.xyzx

#line 18 "C:\General\GR4GA_NISHIOKA\MAGIC COLOR STONE\MGCNew\LightBlueEngine\HLSL\3D\Extension\transform.hlsli"
  mov r1.x, r1.x  // r1.x <- ROTATION

#line 19
  mov r1.yz, r1.yyzy  // r1.y <- SCALE.x; r1.z <- SCALE.y

#line 21
  sincos null, r0.x, r1.x  // r0.x <- COSINE

#line 22
  sincos r0.z, null, r1.x  // r0.z <- SINE

#line 24
  mul r5.x, r0.x, r1.y  // r5.x <- mat._m00
  mov r0.w, -r1.z
  mul r6.x, r0.z, r0.w  // r6.x <- mat._m01
  mul r5.y, r0.z, r1.y  // r5.y <- mat._m10
  mul r6.y, r0.x, r1.z  // r6.y <- mat._m11
  itof r0.xz, l(0, 0, 0, 0)  // r0.x <- mat._m20; r0.z <- mat._m21
  mov r5.z, r0.x  // r5.z <- mat._m20
  mov r6.z, r0.z  // r6.z <- mat._m21

#line 31
  itof r4.z, l(1)
  dp3 r1.x, r4.xyzx, r5.xyzx  // r1.x <- transformed_texcoord.x
  dp3 r1.y, r4.xyzx, r6.xyzx  // r1.y <- transformed_texcoord.y

#line 33
  mov r1.xy, r1.xyxx  // r1.x <- <TransformTexcoord return value>.x; r1.y <- <TransformTexcoord return value>.y

#line 87 "C:\General\GR4GA_NISHIOKA\MAGIC COLOR STONE\MGCNew\LightBlueEngine\HLSL\3D\3D_utility\material_data.hlsli"
  mov r1.xy, r1.xyxx  // r1.x <- transformed_texcoord.x; r1.y <- transformed_texcoord.y

#line 89
  sample_indexable(texture2d)(float,float,float,float) r0.x, r1.xyxx, t16.wxyz, s2  // r0.x <- sampled.w

#line 91
  mul r0.y, r0.x, r0.y

#line 92
endif 

#line 94
mov r0.y, r0.y  // r0.y <- material_data.basecolor_factor.w

#line 101
ilt r0.x, l(-1), r2.x
if_nz r0.x

#line 103
  nop 

#line 108
endif 

#line 122
ilt r0.x, l(-1), r2.z
if_nz r0.x

#line 124
  nop 

#line 130
endif 

#line 138
ilt r0.x, l(-1), r2.y
if_nz r0.x

#line 140
  nop 

#line 144
endif 

#line 152
ilt r0.x, l(-1), r2.w
if_nz r0.x

#line 154
  nop 

#line 158
endif 

#line 165
ilt r0.x, l(-1), r3.x
if_nz r0.x

#line 167
  nop 

#line 171
endif 

#line 181
ilt r0.x, l(-1), r3.y
if_nz r0.x

#line 183
  nop 

#line 187
endif 

#line 196
ilt r0.x, l(-1), r3.z
if_nz r0.x

#line 198
  nop 

#line 202
endif 

#line 204
ilt r0.x, l(-1), r3.w
if_nz r0.x

#line 206
  nop 

#line 210
endif 

#line 219
mov r0.y, r0.y  // r0.y <- <GetMaterialData return value>.basecolor_factor.w

#line 16 "C:\General\GR4GA_NISHIOKA\MAGIC COLOR STONE\MGCNew\LightBlueEngine\HLSL\Particle\accumulate_particle_ps.hlsl"
mov r0.y, r0.y  // r0.y <- material_data.basecolor_factor.w

#line 22
mov r0.xzw, v2.xxyz  // r0.x <- norm_vec.x; r0.z <- norm_vec.y; r0.w <- norm_vec.z

#line 40
mov r0.y, r0.y  // r0.y <- color.w

#line 41
lt r1.x, r0.y, l(0.010000)
if_nz r1.x

#line 42
  discard_nz l(-1)
endif 

#line 48
mov r1.x, l(0)  // r1.x <- particle.particle_index

#line 49
mov r1.yzw, l(-0.000000,-1.000000,-0.000000,-0.000000)
add r1.yzw, r1.yyzw, v1.xxyz  // r1.y <- particle.position.x; r1.z <- particle.position.y; r1.w <- particle.position.z

#line 50
mov r2.x, cb5[5].x  // r2.x <- particle.size

#line 51
mov r2.yzw, cb2[0].xxyz  // r2.y <- particle.color.x; r2.z <- particle.color.y; r2.w <- particle.color.z
mov r0.y, r0.y  // r0.y <- particle.color.w

#line 52
mov r3.xyz, r0.xzwx  // r3.x <- particle.velocity.x; r3.y <- particle.velocity.y; r3.z <- particle.velocity.z

#line 53
mov r4.xyz, l(0,0,0,0)  // r4.x <- particle.acceleration.x; r4.y <- particle.acceleration.y; r4.z <- particle.acceleration.z

#line 54
mov r0.xzw, r0.xxzw  // r0.x <- particle.normal.x; r0.z <- particle.normal.y; r0.w <- particle.normal.z

#line 55
mov r3.w, cb5[5].y  // r3.w <- particle.life

#line 56
mov r4.w, l(0)  // r4.w <- particle.start_time

#line 58
imm_atomic_alloc r5.x, u1
store_structured u1.x, r5.x, l(0), r1.x
store_structured u1.x, r5.x, l(4), r1.y
store_structured u1.x, r5.x, l(8), r1.z
store_structured u1.x, r5.x, l(12), r1.w
store_structured u1.x, r5.x, l(16), r2.x
store_structured u1.x, r5.x, l(20), r2.y
store_structured u1.x, r5.x, l(24), r2.z
store_structured u1.x, r5.x, l(28), r2.w
store_structured u1.x, r5.x, l(32), r0.y
store_structured u1.x, r5.x, l(36), r3.x
store_structured u1.x, r5.x, l(40), r3.y
store_structured u1.x, r5.x, l(44), r3.z
store_structured u1.x, r5.x, l(48), r4.x
store_structured u1.x, r5.x, l(52), r4.y
store_structured u1.x, r5.x, l(56), r4.z
store_structured u1.x, r5.x, l(60), r0.x
store_structured u1.x, r5.x, l(64), r0.z
store_structured u1.x, r5.x, l(68), r0.w
store_structured u1.x, r5.x, l(72), r3.w
store_structured u1.x, r5.x, l(76), r4.w

#line 59
ret 
// Approximately 120 instruction slots used
